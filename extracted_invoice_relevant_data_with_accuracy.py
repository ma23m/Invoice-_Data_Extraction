# -*- coding: utf-8 -*-
"""invoice_relevant_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H0kwORyU99NlvT5EqkTKUHTlp-m4zOjU
"""

!pip install pdfplumber

!pip install pytesseract

!pip install pdf2image

"""**Accuracy Check and Trust Determination:**

**○ Implement an accuracy check logic for each input.**

**○ The system must provide an accuracy assessment for every extracted data point.**

**○ In 99% of cases, the system MUST be able to determine whether the extracted data can be trusted or not. This is a critical requirement.**
"""

import os
import re
import pdfplumber
import pytesseract
from pdf2image import convert_from_path
import pandas as pd

def extract_invoice_data(text, filename):
    data = {}


    invoice_number = re.search(r'Invoice #:\s*(\S+)', text)
    data['Invoice Number'] = invoice_number.group(1) if invoice_number else None


    invoice_date = re.search(r'Invoice Date:\s*(\d{2} \w+ \d{4})', text)
    data['Invoice Date'] = invoice_date.group(1) if invoice_date else None


    due_date = re.search(r'Due Date:\s*(\d{2} \w+ \d{4})', text)
    data['Due Date'] = due_date.group(1) if due_date else None


    item_details = re.search(r'# Item\s+(.*?)\n', text)
    data['Item Details'] = item_details.group(1).strip() if item_details else None


    taxable_amount = re.search(r'Taxable Amount ₹([\d,]+)', text)
    cgst = re.search(r'CGST 9.0% ₹([\d,]+)', text)
    sgst = re.search(r'SGST 9.0% ₹([\d,]+)', text)

    # Use 0 if CGST or SGST are not found, otherwise convert to float
    total_amount = 0
    if taxable_amount:
        total_amount += float(taxable_amount.group(1).replace(',', ''))

    if cgst:
        total_amount += float(cgst.group(1).replace(',', ''))
    else:
        data['CGST'] = 0.0

    if sgst:
        total_amount += float(sgst.group(1).replace(',', ''))
    else:
        data['SGST'] = 0.0


    data['Total Amount'] = total_amount
    customer_name = filename.split('_')[1].replace('.pdf', '') if '_' in filename else None
    data['Customer Name'] = customer_name

    return data

# Function to validate extracted data
def validate_data(data):
    accuracy_checks = {
        'Invoice Number': data['Invoice Number'] is not None and isinstance(data['Invoice Number'], str),
        'Invoice Date': bool(re.match(r'\d{2} \w+ \d{4}', data['Invoice Date'])) if data['Invoice Date'] else False,
        'Due Date': bool(re.match(r'\d{2} \w+ \d{4}', data['Due Date'])) if data['Due Date'] else False,
        'Total Amount': isinstance(data['Total Amount'], (int, float)) and data['Total Amount'] >= 0,
    }

    # Determine trust level
    trust_level = 'Trusted' if all(accuracy_checks.values()) else 'Not Trusted'

    return accuracy_checks, trust_level

def extract_text_from_pdf(pdf_path):
    text = ""

    # Check if the PDF is a regular PDF or a scanned document
    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            text += page.extract_text() or ""

    # If no text is extracted, it may be a scanned document
    if not text.strip():
        images = convert_from_path(pdf_path)
        for image in images:
            text += pytesseract.image_to_string(image)

    return text

def main():
    pdf_folder = '/content/Invoice'
    extracted_data = []

    # Iterate through each PDF in the specified folder
    for filename in os.listdir(pdf_folder):
        if filename.endswith('.pdf'):
            pdf_path = os.path.join(pdf_folder, filename)
            extracted_text = extract_text_from_pdf(pdf_path)

            # Extract structured data from the text
            invoice_data = extract_invoice_data(extracted_text, filename)

            # Validate data and get accuracy checks
            accuracy_checks, trust_level = validate_data(invoice_data)
            invoice_data['Accuracy Checks'] = accuracy_checks
            invoice_data['Trust Level'] = trust_level

            extracted_data.append(invoice_data)


    df = pd.DataFrame(extracted_data)
    df = df[['Invoice Number', 'Invoice Date', 'Due Date', 'Customer Name', 'Total Amount', 'Trust Level']]
    df['Invoice Number'] = pd.to_numeric(df['Invoice Number'].str.replace(r'\D', '', regex=True), errors='coerce')
    df = df.sort_values(by='Invoice Number')

    output_excel_path = 'extracted_invoice_relevant_data_with_accuracy.xlsx'
    df.to_excel(output_excel_path, index=False)

    print(f"Data has been successfully saved to {output_excel_path}")

if __name__ == "__main__":
    main()